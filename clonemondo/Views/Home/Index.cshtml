@model clonemondo.ViewModels.IndexViewModel
<!-- Include the Awesomplete CSS and JavaScript files -->
<link rel="stylesheet" href="/css/Autocomplete.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/awesomplete/1.1.5/awesomplete.min.js"></script>
<script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>


<div id="original-search-container">
    <div class="search-container">
        <br />
        <h3>Welcome! Find your next flexible trip</h3>
        <form asp-controller="Search" asp-action="SearchFlights" method="post" class="form">
            <div class="form-group" id="trip-type-buttons">
                <button type="button" id="one-way-button">One Way</button> /
                <button type="button" id="return-trip-button" class="bold">Return Trip</button>
            </div>
            <div class="form-grid">
                <div class="form-group">
                    <label for="departure">Departure:</label>
                    <input type="text" id="departure" name="departure" placeholder="From?" required minlength="3" maxlength="50">
                </div>
                <div class="form-group">
                    <label for="destination">Destination:</label>
                    <input type="text" id="destination" name="destination" placeholder="To?" required minlength="3" maxlength="50">
                </div>
                <div class="form-group" id="departure-date-group">
                    <label for="departure-date">Departure Date:</label>
                    <input type="date" id="departure-date" name="departure-date" min="@DateTime.Now.ToString("yyyy-MM-dd")" value="@DateTime.Now.AddMonths(1).ToString("yyyy-MM-dd")" required>
                </div>
                <div class="form-group" id="return-date-group">
                    <label for="return-date">Return Date:</label>
                    <input type="date" id="return-date" name="return-date" min="@DateTime.Now.ToString("yyyy-MM-dd")" value="@DateTime.Now.AddMonths(1).AddDays(7).ToString("yyyy-MM-dd")">
                </div>
                <div class="form-group">
                    <button type="submit" id="submit-button">Search</button>
                </div>
            </div>
        </form>

    </div>
</div>


<div class="deals-container">
    <h3>Feeling lucky?</h3>
    <p>Discover a city like never before. Try these extraordinary destinations this @ViewBag.Month</p>

    <div class="fare-container">
        @foreach (var fare in Model.FeaturedFares)
        {
            <div class="deal-box">
                <img src="@fare.ImageUrl" alt="@fare.Country">
                <div class="deal-info">
                    <div class="country">@fare.Country</div>
                    <div class="city">@fare.City</div>
                    <div class="offer">@fare.Duration</div>
                    <div class="price">from @fare.PriceRange kr.</div>
                </div>
            </div>
        }

        <a href="" class="see-more">See more fares</a>

    </div>
</div>

<script>
    // Get a reference to the input fields
    var departureInput = document.getElementById('departure');
    var destinationInput = document.getElementById('destination');

    // Create Awesomplete instances for both input fields
    var awesompleteDeparture = new Awesomplete(departureInput, {
        list: @Html.Raw(Json.Serialize(Model.Airports.Select(a => a.FullName))), // Use your data source
        minChars: 2 // Minimum characters to trigger autocomplete
    });

    var awesompleteDestination = new Awesomplete(destinationInput, {
        list: @Html.Raw(Json.Serialize(Model.Airports.Select(a => a.FullName))), // Use your data source
        minChars: 2 // Minimum characters to trigger autocomplete
    });


    var oneWayButton = document.getElementById('one-way-button');
    var returnTripButton = document.getElementById('return-trip-button');
    var departureDateGroup = document.getElementById('departure-date-group');
    var departureDateInput = document.getElementById('departure-date');

    function setGridColumns() {
        var screenWidth = window.innerWidth;

        if (screenWidth < 1200) {
            oneWayButton.addEventListener('click', function () {
                oneWayButton.classList.add('bold');
                returnTripButton.classList.remove('bold');
                document.getElementById('return-date-group').style.display = 'none';
                document.getElementById('return-date').removeAttribute('required');

                document.getElementsByClassName('form-grid')[0].style.gridTemplateColumns = '100%';
            });

            returnTripButton.addEventListener('click', function () {
                returnTripButton.classList.add('bold');
                oneWayButton.classList.remove('bold');
                document.getElementById('return-date-group').style.display = 'block';
                document.getElementById('return-date').setAttribute('required', 'required');

                document.getElementsByClassName('form-grid')[0].style.gridTemplateColumns = '100%';
            });
        } else {
            oneWayButton.addEventListener('click', function () {
                oneWayButton.classList.add('bold');
                returnTripButton.classList.remove('bold');
                document.getElementById('return-date-group').style.display = 'none';
                document.getElementById('return-date').removeAttribute('required');

                document.getElementsByClassName('form-grid')[0].style.gridTemplateColumns = '25% 25% auto 8%';
            });

            returnTripButton.addEventListener('click', function () {
                returnTripButton.classList.add('bold');
                oneWayButton.classList.remove('bold');
                document.getElementById('return-date-group').style.display = 'block';
                document.getElementById('return-date').setAttribute('required', 'required');

                document.getElementsByClassName('form-grid')[0].style.gridTemplateColumns = '25% 25% auto auto 8%';
            });
        }
    }

    // Initial setup
    setGridColumns();

    // Listen for changes in screen width
    window.addEventListener('resize', setGridColumns);



    // Get a reference to the input fields
    var departureInput = document.getElementById('departure');
    var destinationInput = document.getElementById('destination');

    // Create Awesomplete instances for both input fields
    var awesompleteDeparture = new Awesomplete(departureInput, {
        list: @Html.Raw(Json.Serialize(Model.Airports.Select(a => a.FullName))),
        minChars: 2 // Minimum characters to trigger autocomplete
    });

    var awesompleteDestination = new Awesomplete(destinationInput, {
        list: @Html.Raw(Json.Serialize(Model.Airports.Select(a => a.FullName))),
        minChars: 2
    });

    // Event handler for selecting an option from the autocomplete dropdown
    departureInput.addEventListener('awesomplete-selectcomplete', function () {
        departureInput.classList.add('locked');
        destinationInput.focus(); // Automatically focus on the next input
    });

    destinationInput.addEventListener('awesomplete-selectcomplete', function () {
        destinationInput.classList.add('locked');
    });

    // Event handler for changes in the input field
    departureInput.addEventListener('input', function () {
        if (departureInput.classList.contains('locked')) {
            // Unlock the input field when text is deleted
            if (departureInput.value === '') {
                departureInput.classList.remove('locked');
            } else {
                // Revert to the selected option if the user tries to edit it
                departureInput.value = awesompleteDeparture.selectedValue || '';
            }
        }
    });

    // Event handler for changes in the input field
    destinationInput.addEventListener('input', function () {
        if (destinationInput.classList.contains('locked')) {
            // Unlock the input field when text is deleted
            if (destinationInput.value === '') {
                destinationInput.classList.remove('locked');
            } else {
                // Revert to the selected option if the user tries to edit it
                destinationInput.value = awesompleteDestination.selectedValue || '';
            }
        }
    });
</script>
